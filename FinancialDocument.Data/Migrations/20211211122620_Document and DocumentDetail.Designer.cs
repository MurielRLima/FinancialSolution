// <auto-generated />
using System;
using FinancialDocument.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinancialDocument.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211211122620_Document and DocumentDetail")]
    partial class DocumentandDocumentDetail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseGuidCollation("")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("FinancialDocument.Domain.Entities.BusinessPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<ulong?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(1ul);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Celphone")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<ulong>("IsCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(0ul);

                    b.Property<ulong>("IsSupplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(0ul);

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.ToTable("BusinessPartner");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42813041-f6e0-49e3-93b7-4d1400b0c7b6"),
                            Active = 1ul,
                            Address = "NYC",
                            Celphone = "",
                            CorporateName = "National cutomer",
                            IsCustomer = 1ul,
                            IsSupplier = 0ul,
                            Telephone = "985555-5555",
                            TradingName = "National cutomer"
                        },
                        new
                        {
                            Id = new Guid("6d357424-cf26-4efc-8723-b92c4ed4ca1b"),
                            Active = 1ul,
                            Address = "LA",
                            Celphone = "",
                            CorporateName = "National supplier",
                            IsCustomer = 0ul,
                            IsSupplier = 1ul,
                            Telephone = "975555-5555",
                            TradingName = "National supplier"
                        },
                        new
                        {
                            Id = new Guid("bdad0ecc-949a-48fa-bbc0-9eabbfce4f56"),
                            Active = 1ul,
                            Address = "WD",
                            Celphone = "",
                            CorporateName = "Logistic partner",
                            IsCustomer = 1ul,
                            IsSupplier = 1ul,
                            Telephone = "965555-5555",
                            TradingName = "Logistic partner"
                        });
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<ulong>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(1ul);

                    b.Property<double>("Amount")
                        .HasColumnType("deimal(15,2)");

                    b.Property<Guid>("BusinessPartnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReceivingLocationId")
                        .HasColumnType("char(36)");

                    b.Property<ulong>("Settled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(0ul);

                    b.HasKey("Id");

                    b.HasIndex("BusinessPartnerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReceivingLocationId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.DocumentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<ulong>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(1ul);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<double>("Value")
                        .HasColumnType("deimal(15,2)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentDetail");
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<ulong?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(1ul);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Installments")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc8b0709-b4e9-4f95-9113-ae99b9540e4e"),
                            Active = 1ul,
                            Description = "Dinheiro",
                            Installments = 1
                        },
                        new
                        {
                            Id = new Guid("d997816b-163a-4d98-9194-0603612bcc79"),
                            Active = 1ul,
                            Description = "Boleto banco nacional",
                            Installments = 1
                        },
                        new
                        {
                            Id = new Guid("f66fd18d-899a-4fe2-9fda-247c1a5bfe97"),
                            Active = 1ul,
                            Description = "Boleto banco estadual",
                            Installments = 1
                        },
                        new
                        {
                            Id = new Guid("b5ff2f9b-c4b0-4478-9e50-61dcd37dcb82"),
                            Active = 1ul,
                            Description = "Cartão de crédito à vista",
                            Installments = 1
                        },
                        new
                        {
                            Id = new Guid("d819d8d6-a04a-4ce7-b290-143c79b9d625"),
                            Active = 1ul,
                            Description = "Cartão de crédito 3 vezes",
                            Installments = 3
                        });
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.ReceivingLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<ulong?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(1ul);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ReceivingLocation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f5261df-1bb2-4f0b-a901-9cf15dd8ca44"),
                            Active = 1ul,
                            Description = "Caixa interno"
                        },
                        new
                        {
                            Id = new Guid("efa1e8f7-3df9-45a3-855e-a904cd132ce7"),
                            Active = 1ul,
                            Description = "Conta banco nacional"
                        },
                        new
                        {
                            Id = new Guid("373fa65c-4e06-49a2-82fb-bd69c0c7005c"),
                            Active = 1ul,
                            Description = "Conta banco estadual"
                        });
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.Document", b =>
                {
                    b.HasOne("FinancialDocument.Domain.Entities.BusinessPartner", "businessPartner")
                        .WithMany("Documents")
                        .HasForeignKey("BusinessPartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinancialDocument.Domain.Entities.PaymentMethod", "paymentMethod")
                        .WithMany("Documents")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinancialDocument.Domain.Entities.ReceivingLocation", "receivinglocation")
                        .WithMany("Documents")
                        .HasForeignKey("ReceivingLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("businessPartner");

                    b.Navigation("paymentMethod");

                    b.Navigation("receivinglocation");
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.DocumentDetail", b =>
                {
                    b.HasOne("FinancialDocument.Domain.Entities.Document", "document")
                        .WithMany("documentDetails")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("document");
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.BusinessPartner", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.Document", b =>
                {
                    b.Navigation("documentDetails");
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("FinancialDocument.Domain.Entities.ReceivingLocation", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
